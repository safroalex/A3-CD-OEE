user nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;
    include /etc/nginx/conf.d/*.conf;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
    upstream postgrest {
        server postgrest:3001;
    }
    upstream nodered {
        server node-red:1880;
    }
    upstream swagger {
        server swagger-ui:8080;
    }
    upstream frontend {
        server front:80;
    }
    upstream frontend2 {
        server front-testing:80;
    }
    upstream pgadmin{
        server pg_admin:80;
    }
    server {        
        listen              443 ssl so_keepalive=2s:2s:8;
        server_name         apitest;
        ssl_certificate     cert/apitest.crt;
        ssl_certificate_key cert/apitest.key;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        
        location / {
            proxy_pass http://frontend;
        }

        location /testing/ {
            proxy_pass http://frontend2;
        }

        location /swagger {
            proxy_pass http://swagger;
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                #
                # Custom headers and headers various browsers *should* be OK with but aren't
                #
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                #
                # Tell client that this pre-flight info is valid for 20 days
                #
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                add_header 'Access-Control-Allow-Origin-Credentials' 'true' always;
                return 204;
            }
            if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
            }
            if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
            }
            rewrite ^/swagger/(.*) /$1 break;
        }
        location /api/ {
            default_type  application/json;
            proxy_hide_header Content-Location;
            add_header Content-Location  /api/$upstream_http_content_location;
            proxy_set_header  Connection "";
            proxy_http_version 1.1;
            proxy_pass http://postgrest/;
            
            if ($cookie_access_token) {
                set $auth "Bearer $cookie_access_token";
            }

            if ($http_authorization) {
                set $auth $http_authorization;
            }

            proxy_set_header Authorization ${auth};
        }